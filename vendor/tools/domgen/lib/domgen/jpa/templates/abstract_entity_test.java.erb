/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jpa.qualified_abstract_entity_test_name) %>;
<% remote_refs = repository.application.remote_references_included? -%>

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.jpa.abstract_entity_test_name %>
  extends org.realityforge.guiceyloops.server.AbstractServerTest
{
<% repository.jpa.test_factories.each do |short_code, classname| -%>
  @javax.annotation.Nonnull
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" )
  protected <%= classname %> <%= short_code %>;
<% end -%>

  @org.testng.annotations.BeforeMethod
  public void preTest()
    throws Exception
  {
    super.preTest();
<% if remote_refs -%>
    org.realityforge.replicant.client.test.ee.ReplicantEntityCustomizer.configure( em(), s( org.realityforge.replicant.client.EntitySystem.class ) );
<% end -%>
<% repository.jpa.test_factories.each do |short_code, classname| -%>
    <%= short_code %> = s( <%= classname %>.class );
<% end -%>
<%
  # TODO - there should be a better way of doing this. Perhaps Runnables/Actions that are added by facets?
  if repository.imit?
-%>
    s( javax.transaction.TransactionSynchronizationRegistry.class ).putResource( "ReplicationActive", "Test" );
<% end -%>
  }
<% if repository.jpa.include_default_unit? -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= repository.name %>PersistentTestModule()
  {
    return new <%= repository.jpa.qualified_persistent_test_module_name %>();
  }
<% end -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= repository.name %>FactorySetModule()
  {
    return new <%= repository.jpa.test_factory_module_name %>();
  }

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= repository.name %>DaoModule()
  {
    return new <%= repository.jpa.qualified_dao_module_name %>();
  }

  @java.lang.Override
  protected com.google.inject.Module[] getModules()
  {
    final java.util.ArrayList<com.google.inject.Module> modules = new java.util.ArrayList<>();
    java.util.Collections.addAll( modules, super.getModules() );
<% repository.jpa.extra_test_modules.each do |test_module| %>
    modules.add( new <%= test_module %>() );
<% end -%>
    addModule( modules, new<%= repository.name %>FactorySetModule() );
    addModule( modules, new<%= repository.name %>DaoModule() );
<% if repository.jpa.include_default_unit? -%>
    addModule( modules, new<%= repository.name %>PersistentTestModule() );
<% end -%>
<% repository.jpa.standalone_persistence_units.select{|unit| !unit.manual_test_mode?}.each do |unit| -%>
    addModule( modules, new<%= unit.unit_name %>PersistenceModule() );
<% end -%>
<% if repository.appconfig? -%>
    addModule( modules, newAppConfigPersistenceEntityModule() );
    addModule( modules, newAppConfigRepositoryModule() );
    addModule( modules, newAppConfigServicesModule() );
<% if repository.syncrecord? -%>
    addModule( modules, newSyncRecordPersistenceEntityModule() );
    addModule( modules, newSyncRecordRepositoryModule() );
<% end -%>
<% end -%>
<% if repository.mail? -%>
    addModule( modules, newMailPersistenceEntityModule() );
    addModule( modules, newMailRepositoryModule() );
<% end -%>
<% if remote_refs -%>
    addModule( modules, newReplicantClientTestModule() );
<% end -%>
    return modules.toArray( new com.google.inject.Module[ modules.size() ] );
  }
<% repository.jpa.standalone_persistence_units.select{|unit| unit.mock_test_mode?}.each do |unit| -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= unit.unit_name %>PersistenceModule()
  {
    return new org.realityforge.guiceyloops.server.MockPersistenceTestModule( <%= repository.jpa.qualified_unit_descriptor_name %>.<%= Reality::Naming.uppercase_constantize(unit.short_name) %>_NAME );
  }
<% end -%>
<% repository.jpa.standalone_persistence_units.select{|unit| unit.raw_test_mode?}.each do |unit| -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= unit.unit_name %>PersistenceModule()
  {
    return new <%= unit.qualified_raw_test_module_name %>();
  }
<% end -%>
<% if remote_refs -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module newReplicantClientTestModule()
  {
    return new org.realityforge.replicant.client.test.ReplicantClientTestModule();
  }
<% end -%>
<% if repository.appconfig? -%>

  /**
   * This should be overridden in integration tests so flags can be set and persistent during test.
   */
  @javax.annotation.Nullable
  protected com.google.inject.Module newAppConfigRepositoryModule()
  {
    return new iris.appconfig.server.test.util.AppConfigRepositoryModule();
  }

  @javax.annotation.Nullable
  protected com.google.inject.Module newAppConfigPersistenceEntityModule()
  {
    return new iris.appconfig.server.test.util.AppConfigPersistenceTestModule();
  }

  @javax.annotation.Nullable
  protected com.google.inject.Module newAppConfigServicesModule()
  {
    return new iris.appconfig.server.test.util.AppConfigServicesModule( this );
  }
<% end -%>
<% if repository.syncrecord? -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module newSyncRecordRepositoryModule()
  {
    return new iris.syncrecord.server.test.util.SyncRecordRepositoryModule();
  }

  @javax.annotation.Nullable
  protected com.google.inject.Module newSyncRecordPersistenceEntityModule()
  {
    return new iris.syncrecord.server.test.util.SyncRecordPersistenceTestModule();
  }
<% end -%>
<% if repository.mail? -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module newMailRepositoryModule()
  {
    return new iris.mail.server.test.util.MailRepositoryModule();
  }

  @javax.annotation.Nullable
  protected com.google.inject.Module newMailPersistenceEntityModule()
  {
    return new iris.mail.server.test.util.MailPersistenceTestModule();
  }
<% end -%>
<% if repository.jpa.include_default_unit? -%>

  @javax.annotation.Nullable
  @java.lang.Override
  protected String getPrimaryPersistenceUnitName()
  {
    return <%= repository.jpa.qualified_unit_descriptor_name %>.NAME;
  }
<% else -%>

  @Override
  public void flush()
  {
    //No default persistence unit so no need to flush
  }
<% end -%>
}
